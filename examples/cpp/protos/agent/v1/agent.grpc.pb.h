// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: protos/agent/v1/agent.proto
#ifndef GRPC_protos_2fagent_2fv1_2fagent_2eproto__INCLUDED
#define GRPC_protos_2fagent_2fv1_2fagent_2eproto__INCLUDED

#include "protos/agent/v1/agent.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace v1 {
namespace agent {

// gRPC service for the Formant Agent
class Agent final {
 public:
  static constexpr char const* service_full_name() {
    return "v1.agent.Agent";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Accepts a stream of data points.
    std::unique_ptr< ::grpc::ClientWriterInterface< ::v1::model::Datapoint>> StreamData(::grpc::ClientContext* context, ::v1::agent::StreamDataResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::v1::model::Datapoint>>(StreamDataRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::v1::model::Datapoint>> AsyncStreamData(::grpc::ClientContext* context, ::v1::agent::StreamDataResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::v1::model::Datapoint>>(AsyncStreamDataRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::v1::model::Datapoint>> PrepareAsyncStreamData(::grpc::ClientContext* context, ::v1::agent::StreamDataResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::v1::model::Datapoint>>(PrepareAsyncStreamDataRaw(context, response, cq));
    }
    // Accepts a single data point per RPC call. Also exposed as a HTTP Endpoint.
    virtual ::grpc::Status PostData(::grpc::ClientContext* context, const ::v1::model::Datapoint& request, ::v1::agent::PostDataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::PostDataResponse>> AsyncPostData(::grpc::ClientContext* context, const ::v1::model::Datapoint& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::PostDataResponse>>(AsyncPostDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::PostDataResponse>> PrepareAsyncPostData(::grpc::ClientContext* context, const ::v1::model::Datapoint& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::PostDataResponse>>(PrepareAsyncPostDataRaw(context, request, cq));
    }
    // Registers a ROS Topic and its msg type.
    virtual ::grpc::Status RegisterROSTopic(::grpc::ClientContext* context, const ::v1::model::ROSTopic& request, ::v1::agent::RegisterROSTopicResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::RegisterROSTopicResponse>> AsyncRegisterROSTopic(::grpc::ClientContext* context, const ::v1::model::ROSTopic& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::RegisterROSTopicResponse>>(AsyncRegisterROSTopicRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::RegisterROSTopicResponse>> PrepareAsyncRegisterROSTopic(::grpc::ClientContext* context, const ::v1::model::ROSTopic& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::RegisterROSTopicResponse>>(PrepareAsyncRegisterROSTopicRaw(context, request, cq));
    }
    // DEPRECATED Gets the ROS topics defined in the agent config.
    virtual ::grpc::Status GetROSTopics(::grpc::ClientContext* context, const ::v1::agent::GetROSTopicsRequest& request, ::v1::agent::GetROSTopicsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::GetROSTopicsResponse>> AsyncGetROSTopics(::grpc::ClientContext* context, const ::v1::agent::GetROSTopicsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::GetROSTopicsResponse>>(AsyncGetROSTopicsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::GetROSTopicsResponse>> PrepareAsyncGetROSTopics(::grpc::ClientContext* context, const ::v1::agent::GetROSTopicsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::GetROSTopicsResponse>>(PrepareAsyncGetROSTopicsRaw(context, request, cq));
    }
    // Gets the ROS localization configuration information
    virtual ::grpc::Status GetROSTopicsSubscriptionConfig(::grpc::ClientContext* context, const ::v1::agent::GetROSTopicsSubscriptionConfigRequest& request, ::v1::agent::GetROSTopicsSubscriptionConfigResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::GetROSTopicsSubscriptionConfigResponse>> AsyncGetROSTopicsSubscriptionConfig(::grpc::ClientContext* context, const ::v1::agent::GetROSTopicsSubscriptionConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::GetROSTopicsSubscriptionConfigResponse>>(AsyncGetROSTopicsSubscriptionConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::GetROSTopicsSubscriptionConfigResponse>> PrepareAsyncGetROSTopicsSubscriptionConfig(::grpc::ClientContext* context, const ::v1::agent::GetROSTopicsSubscriptionConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::GetROSTopicsSubscriptionConfigResponse>>(PrepareAsyncGetROSTopicsSubscriptionConfigRaw(context, request, cq));
    }
    // Gets the ROS World Reference Frame ID from the configuration defined in config.toml.
    virtual ::grpc::Status GetROSWorldReferenceFrameID(::grpc::ClientContext* context, const ::v1::agent::GetROSWorldReferenceFrameIDRequest& request, ::v1::agent::GetROSWorldReferenceFrameIDResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::GetROSWorldReferenceFrameIDResponse>> AsyncGetROSWorldReferenceFrameID(::grpc::ClientContext* context, const ::v1::agent::GetROSWorldReferenceFrameIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::GetROSWorldReferenceFrameIDResponse>>(AsyncGetROSWorldReferenceFrameIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::GetROSWorldReferenceFrameIDResponse>> PrepareAsyncGetROSWorldReferenceFrameID(::grpc::ClientContext* context, const ::v1::agent::GetROSWorldReferenceFrameIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::GetROSWorldReferenceFrameIDResponse>>(PrepareAsyncGetROSWorldReferenceFrameIDRaw(context, request, cq));
    }
    // Creates a InterventionRequest. Returns a InterventionRequest with a populated id.
    virtual ::grpc::Status CreateInterventionRequest(::grpc::ClientContext* context, const ::v1::model::InterventionRequest& request, ::v1::model::InterventionRequest* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1::model::InterventionRequest>> AsyncCreateInterventionRequest(::grpc::ClientContext* context, const ::v1::model::InterventionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1::model::InterventionRequest>>(AsyncCreateInterventionRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1::model::InterventionRequest>> PrepareAsyncCreateInterventionRequest(::grpc::ClientContext* context, const ::v1::model::InterventionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1::model::InterventionRequest>>(PrepareAsyncCreateInterventionRequestRaw(context, request, cq));
    }
    // Returns a InterventionRequest. NOTE: the responses object will be empty if a operator has not responded.
    virtual ::grpc::Status GetInterventionRequest(::grpc::ClientContext* context, const ::v1::agent::GetInterventionRequestRequest& request, ::v1::model::InterventionRequest* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1::model::InterventionRequest>> AsyncGetInterventionRequest(::grpc::ClientContext* context, const ::v1::agent::GetInterventionRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1::model::InterventionRequest>>(AsyncGetInterventionRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1::model::InterventionRequest>> PrepareAsyncGetInterventionRequest(::grpc::ClientContext* context, const ::v1::agent::GetInterventionRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1::model::InterventionRequest>>(PrepareAsyncGetInterventionRequestRaw(context, request, cq));
    }
    // Blocks till the InterventionRequest with request_id has a response.
    virtual ::grpc::Status GetInterventionResponse(::grpc::ClientContext* context, const ::v1::agent::GetInterventionResponseRequest& request, ::v1::model::InterventionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1::model::InterventionResponse>> AsyncGetInterventionResponse(::grpc::ClientContext* context, const ::v1::agent::GetInterventionResponseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1::model::InterventionResponse>>(AsyncGetInterventionResponseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1::model::InterventionResponse>> PrepareAsyncGetInterventionResponse(::grpc::ClientContext* context, const ::v1::agent::GetInterventionResponseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1::model::InterventionResponse>>(PrepareAsyncGetInterventionResponseRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Accepts a stream of data points.
      virtual void StreamData(::grpc::ClientContext* context, ::v1::agent::StreamDataResponse* response, ::grpc::experimental::ClientWriteReactor< ::v1::model::Datapoint>* reactor) = 0;
      // Accepts a single data point per RPC call. Also exposed as a HTTP Endpoint.
      virtual void PostData(::grpc::ClientContext* context, const ::v1::model::Datapoint* request, ::v1::agent::PostDataResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Registers a ROS Topic and its msg type.
      virtual void RegisterROSTopic(::grpc::ClientContext* context, const ::v1::model::ROSTopic* request, ::v1::agent::RegisterROSTopicResponse* response, std::function<void(::grpc::Status)>) = 0;
      // DEPRECATED Gets the ROS topics defined in the agent config.
      virtual void GetROSTopics(::grpc::ClientContext* context, const ::v1::agent::GetROSTopicsRequest* request, ::v1::agent::GetROSTopicsResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Gets the ROS localization configuration information
      virtual void GetROSTopicsSubscriptionConfig(::grpc::ClientContext* context, const ::v1::agent::GetROSTopicsSubscriptionConfigRequest* request, ::v1::agent::GetROSTopicsSubscriptionConfigResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Gets the ROS World Reference Frame ID from the configuration defined in config.toml.
      virtual void GetROSWorldReferenceFrameID(::grpc::ClientContext* context, const ::v1::agent::GetROSWorldReferenceFrameIDRequest* request, ::v1::agent::GetROSWorldReferenceFrameIDResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Creates a InterventionRequest. Returns a InterventionRequest with a populated id.
      virtual void CreateInterventionRequest(::grpc::ClientContext* context, const ::v1::model::InterventionRequest* request, ::v1::model::InterventionRequest* response, std::function<void(::grpc::Status)>) = 0;
      // Returns a InterventionRequest. NOTE: the responses object will be empty if a operator has not responded.
      virtual void GetInterventionRequest(::grpc::ClientContext* context, const ::v1::agent::GetInterventionRequestRequest* request, ::v1::model::InterventionRequest* response, std::function<void(::grpc::Status)>) = 0;
      // Blocks till the InterventionRequest with request_id has a response.
      virtual void GetInterventionResponse(::grpc::ClientContext* context, const ::v1::agent::GetInterventionResponseRequest* request, ::v1::model::InterventionResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientWriterInterface< ::v1::model::Datapoint>* StreamDataRaw(::grpc::ClientContext* context, ::v1::agent::StreamDataResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::v1::model::Datapoint>* AsyncStreamDataRaw(::grpc::ClientContext* context, ::v1::agent::StreamDataResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::v1::model::Datapoint>* PrepareAsyncStreamDataRaw(::grpc::ClientContext* context, ::v1::agent::StreamDataResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::PostDataResponse>* AsyncPostDataRaw(::grpc::ClientContext* context, const ::v1::model::Datapoint& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::PostDataResponse>* PrepareAsyncPostDataRaw(::grpc::ClientContext* context, const ::v1::model::Datapoint& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::RegisterROSTopicResponse>* AsyncRegisterROSTopicRaw(::grpc::ClientContext* context, const ::v1::model::ROSTopic& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::RegisterROSTopicResponse>* PrepareAsyncRegisterROSTopicRaw(::grpc::ClientContext* context, const ::v1::model::ROSTopic& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::GetROSTopicsResponse>* AsyncGetROSTopicsRaw(::grpc::ClientContext* context, const ::v1::agent::GetROSTopicsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::GetROSTopicsResponse>* PrepareAsyncGetROSTopicsRaw(::grpc::ClientContext* context, const ::v1::agent::GetROSTopicsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::GetROSTopicsSubscriptionConfigResponse>* AsyncGetROSTopicsSubscriptionConfigRaw(::grpc::ClientContext* context, const ::v1::agent::GetROSTopicsSubscriptionConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::GetROSTopicsSubscriptionConfigResponse>* PrepareAsyncGetROSTopicsSubscriptionConfigRaw(::grpc::ClientContext* context, const ::v1::agent::GetROSTopicsSubscriptionConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::GetROSWorldReferenceFrameIDResponse>* AsyncGetROSWorldReferenceFrameIDRaw(::grpc::ClientContext* context, const ::v1::agent::GetROSWorldReferenceFrameIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::GetROSWorldReferenceFrameIDResponse>* PrepareAsyncGetROSWorldReferenceFrameIDRaw(::grpc::ClientContext* context, const ::v1::agent::GetROSWorldReferenceFrameIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v1::model::InterventionRequest>* AsyncCreateInterventionRequestRaw(::grpc::ClientContext* context, const ::v1::model::InterventionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v1::model::InterventionRequest>* PrepareAsyncCreateInterventionRequestRaw(::grpc::ClientContext* context, const ::v1::model::InterventionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v1::model::InterventionRequest>* AsyncGetInterventionRequestRaw(::grpc::ClientContext* context, const ::v1::agent::GetInterventionRequestRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v1::model::InterventionRequest>* PrepareAsyncGetInterventionRequestRaw(::grpc::ClientContext* context, const ::v1::agent::GetInterventionRequestRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v1::model::InterventionResponse>* AsyncGetInterventionResponseRaw(::grpc::ClientContext* context, const ::v1::agent::GetInterventionResponseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v1::model::InterventionResponse>* PrepareAsyncGetInterventionResponseRaw(::grpc::ClientContext* context, const ::v1::agent::GetInterventionResponseRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientWriter< ::v1::model::Datapoint>> StreamData(::grpc::ClientContext* context, ::v1::agent::StreamDataResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::v1::model::Datapoint>>(StreamDataRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::v1::model::Datapoint>> AsyncStreamData(::grpc::ClientContext* context, ::v1::agent::StreamDataResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::v1::model::Datapoint>>(AsyncStreamDataRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::v1::model::Datapoint>> PrepareAsyncStreamData(::grpc::ClientContext* context, ::v1::agent::StreamDataResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::v1::model::Datapoint>>(PrepareAsyncStreamDataRaw(context, response, cq));
    }
    ::grpc::Status PostData(::grpc::ClientContext* context, const ::v1::model::Datapoint& request, ::v1::agent::PostDataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1::agent::PostDataResponse>> AsyncPostData(::grpc::ClientContext* context, const ::v1::model::Datapoint& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1::agent::PostDataResponse>>(AsyncPostDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1::agent::PostDataResponse>> PrepareAsyncPostData(::grpc::ClientContext* context, const ::v1::model::Datapoint& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1::agent::PostDataResponse>>(PrepareAsyncPostDataRaw(context, request, cq));
    }
    ::grpc::Status RegisterROSTopic(::grpc::ClientContext* context, const ::v1::model::ROSTopic& request, ::v1::agent::RegisterROSTopicResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1::agent::RegisterROSTopicResponse>> AsyncRegisterROSTopic(::grpc::ClientContext* context, const ::v1::model::ROSTopic& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1::agent::RegisterROSTopicResponse>>(AsyncRegisterROSTopicRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1::agent::RegisterROSTopicResponse>> PrepareAsyncRegisterROSTopic(::grpc::ClientContext* context, const ::v1::model::ROSTopic& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1::agent::RegisterROSTopicResponse>>(PrepareAsyncRegisterROSTopicRaw(context, request, cq));
    }
    ::grpc::Status GetROSTopics(::grpc::ClientContext* context, const ::v1::agent::GetROSTopicsRequest& request, ::v1::agent::GetROSTopicsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1::agent::GetROSTopicsResponse>> AsyncGetROSTopics(::grpc::ClientContext* context, const ::v1::agent::GetROSTopicsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1::agent::GetROSTopicsResponse>>(AsyncGetROSTopicsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1::agent::GetROSTopicsResponse>> PrepareAsyncGetROSTopics(::grpc::ClientContext* context, const ::v1::agent::GetROSTopicsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1::agent::GetROSTopicsResponse>>(PrepareAsyncGetROSTopicsRaw(context, request, cq));
    }
    ::grpc::Status GetROSTopicsSubscriptionConfig(::grpc::ClientContext* context, const ::v1::agent::GetROSTopicsSubscriptionConfigRequest& request, ::v1::agent::GetROSTopicsSubscriptionConfigResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1::agent::GetROSTopicsSubscriptionConfigResponse>> AsyncGetROSTopicsSubscriptionConfig(::grpc::ClientContext* context, const ::v1::agent::GetROSTopicsSubscriptionConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1::agent::GetROSTopicsSubscriptionConfigResponse>>(AsyncGetROSTopicsSubscriptionConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1::agent::GetROSTopicsSubscriptionConfigResponse>> PrepareAsyncGetROSTopicsSubscriptionConfig(::grpc::ClientContext* context, const ::v1::agent::GetROSTopicsSubscriptionConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1::agent::GetROSTopicsSubscriptionConfigResponse>>(PrepareAsyncGetROSTopicsSubscriptionConfigRaw(context, request, cq));
    }
    ::grpc::Status GetROSWorldReferenceFrameID(::grpc::ClientContext* context, const ::v1::agent::GetROSWorldReferenceFrameIDRequest& request, ::v1::agent::GetROSWorldReferenceFrameIDResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1::agent::GetROSWorldReferenceFrameIDResponse>> AsyncGetROSWorldReferenceFrameID(::grpc::ClientContext* context, const ::v1::agent::GetROSWorldReferenceFrameIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1::agent::GetROSWorldReferenceFrameIDResponse>>(AsyncGetROSWorldReferenceFrameIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1::agent::GetROSWorldReferenceFrameIDResponse>> PrepareAsyncGetROSWorldReferenceFrameID(::grpc::ClientContext* context, const ::v1::agent::GetROSWorldReferenceFrameIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1::agent::GetROSWorldReferenceFrameIDResponse>>(PrepareAsyncGetROSWorldReferenceFrameIDRaw(context, request, cq));
    }
    ::grpc::Status CreateInterventionRequest(::grpc::ClientContext* context, const ::v1::model::InterventionRequest& request, ::v1::model::InterventionRequest* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1::model::InterventionRequest>> AsyncCreateInterventionRequest(::grpc::ClientContext* context, const ::v1::model::InterventionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1::model::InterventionRequest>>(AsyncCreateInterventionRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1::model::InterventionRequest>> PrepareAsyncCreateInterventionRequest(::grpc::ClientContext* context, const ::v1::model::InterventionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1::model::InterventionRequest>>(PrepareAsyncCreateInterventionRequestRaw(context, request, cq));
    }
    ::grpc::Status GetInterventionRequest(::grpc::ClientContext* context, const ::v1::agent::GetInterventionRequestRequest& request, ::v1::model::InterventionRequest* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1::model::InterventionRequest>> AsyncGetInterventionRequest(::grpc::ClientContext* context, const ::v1::agent::GetInterventionRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1::model::InterventionRequest>>(AsyncGetInterventionRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1::model::InterventionRequest>> PrepareAsyncGetInterventionRequest(::grpc::ClientContext* context, const ::v1::agent::GetInterventionRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1::model::InterventionRequest>>(PrepareAsyncGetInterventionRequestRaw(context, request, cq));
    }
    ::grpc::Status GetInterventionResponse(::grpc::ClientContext* context, const ::v1::agent::GetInterventionResponseRequest& request, ::v1::model::InterventionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1::model::InterventionResponse>> AsyncGetInterventionResponse(::grpc::ClientContext* context, const ::v1::agent::GetInterventionResponseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1::model::InterventionResponse>>(AsyncGetInterventionResponseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1::model::InterventionResponse>> PrepareAsyncGetInterventionResponse(::grpc::ClientContext* context, const ::v1::agent::GetInterventionResponseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1::model::InterventionResponse>>(PrepareAsyncGetInterventionResponseRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void StreamData(::grpc::ClientContext* context, ::v1::agent::StreamDataResponse* response, ::grpc::experimental::ClientWriteReactor< ::v1::model::Datapoint>* reactor) override;
      void PostData(::grpc::ClientContext* context, const ::v1::model::Datapoint* request, ::v1::agent::PostDataResponse* response, std::function<void(::grpc::Status)>) override;
      void RegisterROSTopic(::grpc::ClientContext* context, const ::v1::model::ROSTopic* request, ::v1::agent::RegisterROSTopicResponse* response, std::function<void(::grpc::Status)>) override;
      void GetROSTopics(::grpc::ClientContext* context, const ::v1::agent::GetROSTopicsRequest* request, ::v1::agent::GetROSTopicsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetROSTopicsSubscriptionConfig(::grpc::ClientContext* context, const ::v1::agent::GetROSTopicsSubscriptionConfigRequest* request, ::v1::agent::GetROSTopicsSubscriptionConfigResponse* response, std::function<void(::grpc::Status)>) override;
      void GetROSWorldReferenceFrameID(::grpc::ClientContext* context, const ::v1::agent::GetROSWorldReferenceFrameIDRequest* request, ::v1::agent::GetROSWorldReferenceFrameIDResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateInterventionRequest(::grpc::ClientContext* context, const ::v1::model::InterventionRequest* request, ::v1::model::InterventionRequest* response, std::function<void(::grpc::Status)>) override;
      void GetInterventionRequest(::grpc::ClientContext* context, const ::v1::agent::GetInterventionRequestRequest* request, ::v1::model::InterventionRequest* response, std::function<void(::grpc::Status)>) override;
      void GetInterventionResponse(::grpc::ClientContext* context, const ::v1::agent::GetInterventionResponseRequest* request, ::v1::model::InterventionResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientWriter< ::v1::model::Datapoint>* StreamDataRaw(::grpc::ClientContext* context, ::v1::agent::StreamDataResponse* response) override;
    ::grpc::ClientAsyncWriter< ::v1::model::Datapoint>* AsyncStreamDataRaw(::grpc::ClientContext* context, ::v1::agent::StreamDataResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::v1::model::Datapoint>* PrepareAsyncStreamDataRaw(::grpc::ClientContext* context, ::v1::agent::StreamDataResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v1::agent::PostDataResponse>* AsyncPostDataRaw(::grpc::ClientContext* context, const ::v1::model::Datapoint& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v1::agent::PostDataResponse>* PrepareAsyncPostDataRaw(::grpc::ClientContext* context, const ::v1::model::Datapoint& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v1::agent::RegisterROSTopicResponse>* AsyncRegisterROSTopicRaw(::grpc::ClientContext* context, const ::v1::model::ROSTopic& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v1::agent::RegisterROSTopicResponse>* PrepareAsyncRegisterROSTopicRaw(::grpc::ClientContext* context, const ::v1::model::ROSTopic& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v1::agent::GetROSTopicsResponse>* AsyncGetROSTopicsRaw(::grpc::ClientContext* context, const ::v1::agent::GetROSTopicsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v1::agent::GetROSTopicsResponse>* PrepareAsyncGetROSTopicsRaw(::grpc::ClientContext* context, const ::v1::agent::GetROSTopicsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v1::agent::GetROSTopicsSubscriptionConfigResponse>* AsyncGetROSTopicsSubscriptionConfigRaw(::grpc::ClientContext* context, const ::v1::agent::GetROSTopicsSubscriptionConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v1::agent::GetROSTopicsSubscriptionConfigResponse>* PrepareAsyncGetROSTopicsSubscriptionConfigRaw(::grpc::ClientContext* context, const ::v1::agent::GetROSTopicsSubscriptionConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v1::agent::GetROSWorldReferenceFrameIDResponse>* AsyncGetROSWorldReferenceFrameIDRaw(::grpc::ClientContext* context, const ::v1::agent::GetROSWorldReferenceFrameIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v1::agent::GetROSWorldReferenceFrameIDResponse>* PrepareAsyncGetROSWorldReferenceFrameIDRaw(::grpc::ClientContext* context, const ::v1::agent::GetROSWorldReferenceFrameIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v1::model::InterventionRequest>* AsyncCreateInterventionRequestRaw(::grpc::ClientContext* context, const ::v1::model::InterventionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v1::model::InterventionRequest>* PrepareAsyncCreateInterventionRequestRaw(::grpc::ClientContext* context, const ::v1::model::InterventionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v1::model::InterventionRequest>* AsyncGetInterventionRequestRaw(::grpc::ClientContext* context, const ::v1::agent::GetInterventionRequestRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v1::model::InterventionRequest>* PrepareAsyncGetInterventionRequestRaw(::grpc::ClientContext* context, const ::v1::agent::GetInterventionRequestRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v1::model::InterventionResponse>* AsyncGetInterventionResponseRaw(::grpc::ClientContext* context, const ::v1::agent::GetInterventionResponseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v1::model::InterventionResponse>* PrepareAsyncGetInterventionResponseRaw(::grpc::ClientContext* context, const ::v1::agent::GetInterventionResponseRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_StreamData_;
    const ::grpc::internal::RpcMethod rpcmethod_PostData_;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterROSTopic_;
    const ::grpc::internal::RpcMethod rpcmethod_GetROSTopics_;
    const ::grpc::internal::RpcMethod rpcmethod_GetROSTopicsSubscriptionConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_GetROSWorldReferenceFrameID_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateInterventionRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_GetInterventionRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_GetInterventionResponse_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Accepts a stream of data points.
    virtual ::grpc::Status StreamData(::grpc::ServerContext* context, ::grpc::ServerReader< ::v1::model::Datapoint>* reader, ::v1::agent::StreamDataResponse* response);
    // Accepts a single data point per RPC call. Also exposed as a HTTP Endpoint.
    virtual ::grpc::Status PostData(::grpc::ServerContext* context, const ::v1::model::Datapoint* request, ::v1::agent::PostDataResponse* response);
    // Registers a ROS Topic and its msg type.
    virtual ::grpc::Status RegisterROSTopic(::grpc::ServerContext* context, const ::v1::model::ROSTopic* request, ::v1::agent::RegisterROSTopicResponse* response);
    // DEPRECATED Gets the ROS topics defined in the agent config.
    virtual ::grpc::Status GetROSTopics(::grpc::ServerContext* context, const ::v1::agent::GetROSTopicsRequest* request, ::v1::agent::GetROSTopicsResponse* response);
    // Gets the ROS localization configuration information
    virtual ::grpc::Status GetROSTopicsSubscriptionConfig(::grpc::ServerContext* context, const ::v1::agent::GetROSTopicsSubscriptionConfigRequest* request, ::v1::agent::GetROSTopicsSubscriptionConfigResponse* response);
    // Gets the ROS World Reference Frame ID from the configuration defined in config.toml.
    virtual ::grpc::Status GetROSWorldReferenceFrameID(::grpc::ServerContext* context, const ::v1::agent::GetROSWorldReferenceFrameIDRequest* request, ::v1::agent::GetROSWorldReferenceFrameIDResponse* response);
    // Creates a InterventionRequest. Returns a InterventionRequest with a populated id.
    virtual ::grpc::Status CreateInterventionRequest(::grpc::ServerContext* context, const ::v1::model::InterventionRequest* request, ::v1::model::InterventionRequest* response);
    // Returns a InterventionRequest. NOTE: the responses object will be empty if a operator has not responded.
    virtual ::grpc::Status GetInterventionRequest(::grpc::ServerContext* context, const ::v1::agent::GetInterventionRequestRequest* request, ::v1::model::InterventionRequest* response);
    // Blocks till the InterventionRequest with request_id has a response.
    virtual ::grpc::Status GetInterventionResponse(::grpc::ServerContext* context, const ::v1::agent::GetInterventionResponseRequest* request, ::v1::model::InterventionResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_StreamData() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_StreamData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamData(::grpc::ServerContext* context, ::grpc::ServerReader< ::v1::model::Datapoint>* reader, ::v1::agent::StreamDataResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamData(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::v1::agent::StreamDataResponse, ::v1::model::Datapoint>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PostData() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_PostData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostData(::grpc::ServerContext* context, const ::v1::model::Datapoint* request, ::v1::agent::PostDataResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostData(::grpc::ServerContext* context, ::v1::model::Datapoint* request, ::grpc::ServerAsyncResponseWriter< ::v1::agent::PostDataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterROSTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RegisterROSTopic() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RegisterROSTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterROSTopic(::grpc::ServerContext* context, const ::v1::model::ROSTopic* request, ::v1::agent::RegisterROSTopicResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterROSTopic(::grpc::ServerContext* context, ::v1::model::ROSTopic* request, ::grpc::ServerAsyncResponseWriter< ::v1::agent::RegisterROSTopicResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetROSTopics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetROSTopics() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetROSTopics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetROSTopics(::grpc::ServerContext* context, const ::v1::agent::GetROSTopicsRequest* request, ::v1::agent::GetROSTopicsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetROSTopics(::grpc::ServerContext* context, ::v1::agent::GetROSTopicsRequest* request, ::grpc::ServerAsyncResponseWriter< ::v1::agent::GetROSTopicsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetROSTopicsSubscriptionConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetROSTopicsSubscriptionConfig() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetROSTopicsSubscriptionConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetROSTopicsSubscriptionConfig(::grpc::ServerContext* context, const ::v1::agent::GetROSTopicsSubscriptionConfigRequest* request, ::v1::agent::GetROSTopicsSubscriptionConfigResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetROSTopicsSubscriptionConfig(::grpc::ServerContext* context, ::v1::agent::GetROSTopicsSubscriptionConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::v1::agent::GetROSTopicsSubscriptionConfigResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetROSWorldReferenceFrameID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetROSWorldReferenceFrameID() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetROSWorldReferenceFrameID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetROSWorldReferenceFrameID(::grpc::ServerContext* context, const ::v1::agent::GetROSWorldReferenceFrameIDRequest* request, ::v1::agent::GetROSWorldReferenceFrameIDResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetROSWorldReferenceFrameID(::grpc::ServerContext* context, ::v1::agent::GetROSWorldReferenceFrameIDRequest* request, ::grpc::ServerAsyncResponseWriter< ::v1::agent::GetROSWorldReferenceFrameIDResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateInterventionRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateInterventionRequest() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_CreateInterventionRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateInterventionRequest(::grpc::ServerContext* context, const ::v1::model::InterventionRequest* request, ::v1::model::InterventionRequest* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateInterventionRequest(::grpc::ServerContext* context, ::v1::model::InterventionRequest* request, ::grpc::ServerAsyncResponseWriter< ::v1::model::InterventionRequest>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetInterventionRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetInterventionRequest() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetInterventionRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInterventionRequest(::grpc::ServerContext* context, const ::v1::agent::GetInterventionRequestRequest* request, ::v1::model::InterventionRequest* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInterventionRequest(::grpc::ServerContext* context, ::v1::agent::GetInterventionRequestRequest* request, ::grpc::ServerAsyncResponseWriter< ::v1::model::InterventionRequest>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetInterventionResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetInterventionResponse() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetInterventionResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInterventionResponse(::grpc::ServerContext* context, const ::v1::agent::GetInterventionResponseRequest* request, ::v1::model::InterventionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInterventionResponse(::grpc::ServerContext* context, ::v1::agent::GetInterventionResponseRequest* request, ::grpc::ServerAsyncResponseWriter< ::v1::model::InterventionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_StreamData<WithAsyncMethod_PostData<WithAsyncMethod_RegisterROSTopic<WithAsyncMethod_GetROSTopics<WithAsyncMethod_GetROSTopicsSubscriptionConfig<WithAsyncMethod_GetROSWorldReferenceFrameID<WithAsyncMethod_CreateInterventionRequest<WithAsyncMethod_GetInterventionRequest<WithAsyncMethod_GetInterventionResponse<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StreamData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_StreamData() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackClientStreamingHandler< ::v1::model::Datapoint, ::v1::agent::StreamDataResponse>(
          [this] { return this->StreamData(); }));
    }
    ~ExperimentalWithCallbackMethod_StreamData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamData(::grpc::ServerContext* context, ::grpc::ServerReader< ::v1::model::Datapoint>* reader, ::v1::agent::StreamDataResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::v1::model::Datapoint, ::v1::agent::StreamDataResponse>* StreamData() {
      return new ::grpc::internal::UnimplementedReadReactor<
        ::v1::model::Datapoint, ::v1::agent::StreamDataResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PostData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_PostData() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::v1::model::Datapoint, ::v1::agent::PostDataResponse>(
          [this](::grpc::ServerContext* context,
                 const ::v1::model::Datapoint* request,
                 ::v1::agent::PostDataResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->PostData(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_PostData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostData(::grpc::ServerContext* context, const ::v1::model::Datapoint* request, ::v1::agent::PostDataResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PostData(::grpc::ServerContext* context, const ::v1::model::Datapoint* request, ::v1::agent::PostDataResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RegisterROSTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_RegisterROSTopic() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::v1::model::ROSTopic, ::v1::agent::RegisterROSTopicResponse>(
          [this](::grpc::ServerContext* context,
                 const ::v1::model::ROSTopic* request,
                 ::v1::agent::RegisterROSTopicResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->RegisterROSTopic(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_RegisterROSTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterROSTopic(::grpc::ServerContext* context, const ::v1::model::ROSTopic* request, ::v1::agent::RegisterROSTopicResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RegisterROSTopic(::grpc::ServerContext* context, const ::v1::model::ROSTopic* request, ::v1::agent::RegisterROSTopicResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetROSTopics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetROSTopics() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::v1::agent::GetROSTopicsRequest, ::v1::agent::GetROSTopicsResponse>(
          [this](::grpc::ServerContext* context,
                 const ::v1::agent::GetROSTopicsRequest* request,
                 ::v1::agent::GetROSTopicsResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetROSTopics(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetROSTopics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetROSTopics(::grpc::ServerContext* context, const ::v1::agent::GetROSTopicsRequest* request, ::v1::agent::GetROSTopicsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetROSTopics(::grpc::ServerContext* context, const ::v1::agent::GetROSTopicsRequest* request, ::v1::agent::GetROSTopicsResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetROSTopicsSubscriptionConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetROSTopicsSubscriptionConfig() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::v1::agent::GetROSTopicsSubscriptionConfigRequest, ::v1::agent::GetROSTopicsSubscriptionConfigResponse>(
          [this](::grpc::ServerContext* context,
                 const ::v1::agent::GetROSTopicsSubscriptionConfigRequest* request,
                 ::v1::agent::GetROSTopicsSubscriptionConfigResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetROSTopicsSubscriptionConfig(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetROSTopicsSubscriptionConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetROSTopicsSubscriptionConfig(::grpc::ServerContext* context, const ::v1::agent::GetROSTopicsSubscriptionConfigRequest* request, ::v1::agent::GetROSTopicsSubscriptionConfigResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetROSTopicsSubscriptionConfig(::grpc::ServerContext* context, const ::v1::agent::GetROSTopicsSubscriptionConfigRequest* request, ::v1::agent::GetROSTopicsSubscriptionConfigResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetROSWorldReferenceFrameID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetROSWorldReferenceFrameID() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::v1::agent::GetROSWorldReferenceFrameIDRequest, ::v1::agent::GetROSWorldReferenceFrameIDResponse>(
          [this](::grpc::ServerContext* context,
                 const ::v1::agent::GetROSWorldReferenceFrameIDRequest* request,
                 ::v1::agent::GetROSWorldReferenceFrameIDResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetROSWorldReferenceFrameID(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetROSWorldReferenceFrameID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetROSWorldReferenceFrameID(::grpc::ServerContext* context, const ::v1::agent::GetROSWorldReferenceFrameIDRequest* request, ::v1::agent::GetROSWorldReferenceFrameIDResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetROSWorldReferenceFrameID(::grpc::ServerContext* context, const ::v1::agent::GetROSWorldReferenceFrameIDRequest* request, ::v1::agent::GetROSWorldReferenceFrameIDResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateInterventionRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CreateInterventionRequest() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::v1::model::InterventionRequest, ::v1::model::InterventionRequest>(
          [this](::grpc::ServerContext* context,
                 const ::v1::model::InterventionRequest* request,
                 ::v1::model::InterventionRequest* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CreateInterventionRequest(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_CreateInterventionRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateInterventionRequest(::grpc::ServerContext* context, const ::v1::model::InterventionRequest* request, ::v1::model::InterventionRequest* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateInterventionRequest(::grpc::ServerContext* context, const ::v1::model::InterventionRequest* request, ::v1::model::InterventionRequest* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetInterventionRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetInterventionRequest() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::v1::agent::GetInterventionRequestRequest, ::v1::model::InterventionRequest>(
          [this](::grpc::ServerContext* context,
                 const ::v1::agent::GetInterventionRequestRequest* request,
                 ::v1::model::InterventionRequest* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetInterventionRequest(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetInterventionRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInterventionRequest(::grpc::ServerContext* context, const ::v1::agent::GetInterventionRequestRequest* request, ::v1::model::InterventionRequest* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetInterventionRequest(::grpc::ServerContext* context, const ::v1::agent::GetInterventionRequestRequest* request, ::v1::model::InterventionRequest* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetInterventionResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetInterventionResponse() {
      ::grpc::Service::experimental().MarkMethodCallback(8,
        new ::grpc::internal::CallbackUnaryHandler< ::v1::agent::GetInterventionResponseRequest, ::v1::model::InterventionResponse>(
          [this](::grpc::ServerContext* context,
                 const ::v1::agent::GetInterventionResponseRequest* request,
                 ::v1::model::InterventionResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetInterventionResponse(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetInterventionResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInterventionResponse(::grpc::ServerContext* context, const ::v1::agent::GetInterventionResponseRequest* request, ::v1::model::InterventionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetInterventionResponse(::grpc::ServerContext* context, const ::v1::agent::GetInterventionResponseRequest* request, ::v1::model::InterventionResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_StreamData<ExperimentalWithCallbackMethod_PostData<ExperimentalWithCallbackMethod_RegisterROSTopic<ExperimentalWithCallbackMethod_GetROSTopics<ExperimentalWithCallbackMethod_GetROSTopicsSubscriptionConfig<ExperimentalWithCallbackMethod_GetROSWorldReferenceFrameID<ExperimentalWithCallbackMethod_CreateInterventionRequest<ExperimentalWithCallbackMethod_GetInterventionRequest<ExperimentalWithCallbackMethod_GetInterventionResponse<Service > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_StreamData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_StreamData() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_StreamData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamData(::grpc::ServerContext* context, ::grpc::ServerReader< ::v1::model::Datapoint>* reader, ::v1::agent::StreamDataResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PostData() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_PostData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostData(::grpc::ServerContext* context, const ::v1::model::Datapoint* request, ::v1::agent::PostDataResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegisterROSTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RegisterROSTopic() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RegisterROSTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterROSTopic(::grpc::ServerContext* context, const ::v1::model::ROSTopic* request, ::v1::agent::RegisterROSTopicResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetROSTopics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetROSTopics() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetROSTopics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetROSTopics(::grpc::ServerContext* context, const ::v1::agent::GetROSTopicsRequest* request, ::v1::agent::GetROSTopicsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetROSTopicsSubscriptionConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetROSTopicsSubscriptionConfig() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetROSTopicsSubscriptionConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetROSTopicsSubscriptionConfig(::grpc::ServerContext* context, const ::v1::agent::GetROSTopicsSubscriptionConfigRequest* request, ::v1::agent::GetROSTopicsSubscriptionConfigResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetROSWorldReferenceFrameID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetROSWorldReferenceFrameID() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetROSWorldReferenceFrameID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetROSWorldReferenceFrameID(::grpc::ServerContext* context, const ::v1::agent::GetROSWorldReferenceFrameIDRequest* request, ::v1::agent::GetROSWorldReferenceFrameIDResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateInterventionRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateInterventionRequest() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_CreateInterventionRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateInterventionRequest(::grpc::ServerContext* context, const ::v1::model::InterventionRequest* request, ::v1::model::InterventionRequest* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetInterventionRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetInterventionRequest() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetInterventionRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInterventionRequest(::grpc::ServerContext* context, const ::v1::agent::GetInterventionRequestRequest* request, ::v1::model::InterventionRequest* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetInterventionResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetInterventionResponse() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetInterventionResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInterventionResponse(::grpc::ServerContext* context, const ::v1::agent::GetInterventionResponseRequest* request, ::v1::model::InterventionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_StreamData() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_StreamData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamData(::grpc::ServerContext* context, ::grpc::ServerReader< ::v1::model::Datapoint>* reader, ::v1::agent::StreamDataResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamData(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_PostData() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_PostData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostData(::grpc::ServerContext* context, const ::v1::model::Datapoint* request, ::v1::agent::PostDataResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterROSTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RegisterROSTopic() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RegisterROSTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterROSTopic(::grpc::ServerContext* context, const ::v1::model::ROSTopic* request, ::v1::agent::RegisterROSTopicResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterROSTopic(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetROSTopics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetROSTopics() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetROSTopics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetROSTopics(::grpc::ServerContext* context, const ::v1::agent::GetROSTopicsRequest* request, ::v1::agent::GetROSTopicsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetROSTopics(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetROSTopicsSubscriptionConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetROSTopicsSubscriptionConfig() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetROSTopicsSubscriptionConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetROSTopicsSubscriptionConfig(::grpc::ServerContext* context, const ::v1::agent::GetROSTopicsSubscriptionConfigRequest* request, ::v1::agent::GetROSTopicsSubscriptionConfigResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetROSTopicsSubscriptionConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetROSWorldReferenceFrameID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetROSWorldReferenceFrameID() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetROSWorldReferenceFrameID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetROSWorldReferenceFrameID(::grpc::ServerContext* context, const ::v1::agent::GetROSWorldReferenceFrameIDRequest* request, ::v1::agent::GetROSWorldReferenceFrameIDResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetROSWorldReferenceFrameID(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateInterventionRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateInterventionRequest() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_CreateInterventionRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateInterventionRequest(::grpc::ServerContext* context, const ::v1::model::InterventionRequest* request, ::v1::model::InterventionRequest* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateInterventionRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetInterventionRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetInterventionRequest() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetInterventionRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInterventionRequest(::grpc::ServerContext* context, const ::v1::agent::GetInterventionRequestRequest* request, ::v1::model::InterventionRequest* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInterventionRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetInterventionResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetInterventionResponse() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_GetInterventionResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInterventionResponse(::grpc::ServerContext* context, const ::v1::agent::GetInterventionResponseRequest* request, ::v1::model::InterventionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInterventionResponse(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StreamData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_StreamData() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->StreamData(); }));
    }
    ~ExperimentalWithRawCallbackMethod_StreamData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamData(::grpc::ServerContext* context, ::grpc::ServerReader< ::v1::model::Datapoint>* reader, ::v1::agent::StreamDataResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* StreamData() {
      return new ::grpc::internal::UnimplementedReadReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PostData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_PostData() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->PostData(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_PostData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostData(::grpc::ServerContext* context, const ::v1::model::Datapoint* request, ::v1::agent::PostDataResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PostData(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RegisterROSTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_RegisterROSTopic() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->RegisterROSTopic(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_RegisterROSTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterROSTopic(::grpc::ServerContext* context, const ::v1::model::ROSTopic* request, ::v1::agent::RegisterROSTopicResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RegisterROSTopic(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetROSTopics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetROSTopics() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetROSTopics(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetROSTopics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetROSTopics(::grpc::ServerContext* context, const ::v1::agent::GetROSTopicsRequest* request, ::v1::agent::GetROSTopicsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetROSTopics(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetROSTopicsSubscriptionConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetROSTopicsSubscriptionConfig() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetROSTopicsSubscriptionConfig(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetROSTopicsSubscriptionConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetROSTopicsSubscriptionConfig(::grpc::ServerContext* context, const ::v1::agent::GetROSTopicsSubscriptionConfigRequest* request, ::v1::agent::GetROSTopicsSubscriptionConfigResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetROSTopicsSubscriptionConfig(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetROSWorldReferenceFrameID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetROSWorldReferenceFrameID() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetROSWorldReferenceFrameID(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetROSWorldReferenceFrameID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetROSWorldReferenceFrameID(::grpc::ServerContext* context, const ::v1::agent::GetROSWorldReferenceFrameIDRequest* request, ::v1::agent::GetROSWorldReferenceFrameIDResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetROSWorldReferenceFrameID(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateInterventionRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateInterventionRequest() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CreateInterventionRequest(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateInterventionRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateInterventionRequest(::grpc::ServerContext* context, const ::v1::model::InterventionRequest* request, ::v1::model::InterventionRequest* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateInterventionRequest(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetInterventionRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetInterventionRequest() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetInterventionRequest(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetInterventionRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInterventionRequest(::grpc::ServerContext* context, const ::v1::agent::GetInterventionRequestRequest* request, ::v1::model::InterventionRequest* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetInterventionRequest(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetInterventionResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetInterventionResponse() {
      ::grpc::Service::experimental().MarkMethodRawCallback(8,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetInterventionResponse(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetInterventionResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInterventionResponse(::grpc::ServerContext* context, const ::v1::agent::GetInterventionResponseRequest* request, ::v1::model::InterventionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetInterventionResponse(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PostData() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::v1::model::Datapoint, ::v1::agent::PostDataResponse>(std::bind(&WithStreamedUnaryMethod_PostData<BaseClass>::StreamedPostData, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PostData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostData(::grpc::ServerContext* context, const ::v1::model::Datapoint* request, ::v1::agent::PostDataResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::v1::model::Datapoint,::v1::agent::PostDataResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterROSTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RegisterROSTopic() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::v1::model::ROSTopic, ::v1::agent::RegisterROSTopicResponse>(std::bind(&WithStreamedUnaryMethod_RegisterROSTopic<BaseClass>::StreamedRegisterROSTopic, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RegisterROSTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterROSTopic(::grpc::ServerContext* context, const ::v1::model::ROSTopic* request, ::v1::agent::RegisterROSTopicResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterROSTopic(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::v1::model::ROSTopic,::v1::agent::RegisterROSTopicResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetROSTopics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetROSTopics() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::v1::agent::GetROSTopicsRequest, ::v1::agent::GetROSTopicsResponse>(std::bind(&WithStreamedUnaryMethod_GetROSTopics<BaseClass>::StreamedGetROSTopics, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetROSTopics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetROSTopics(::grpc::ServerContext* context, const ::v1::agent::GetROSTopicsRequest* request, ::v1::agent::GetROSTopicsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetROSTopics(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::v1::agent::GetROSTopicsRequest,::v1::agent::GetROSTopicsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetROSTopicsSubscriptionConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetROSTopicsSubscriptionConfig() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::v1::agent::GetROSTopicsSubscriptionConfigRequest, ::v1::agent::GetROSTopicsSubscriptionConfigResponse>(std::bind(&WithStreamedUnaryMethod_GetROSTopicsSubscriptionConfig<BaseClass>::StreamedGetROSTopicsSubscriptionConfig, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetROSTopicsSubscriptionConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetROSTopicsSubscriptionConfig(::grpc::ServerContext* context, const ::v1::agent::GetROSTopicsSubscriptionConfigRequest* request, ::v1::agent::GetROSTopicsSubscriptionConfigResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetROSTopicsSubscriptionConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::v1::agent::GetROSTopicsSubscriptionConfigRequest,::v1::agent::GetROSTopicsSubscriptionConfigResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetROSWorldReferenceFrameID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetROSWorldReferenceFrameID() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::v1::agent::GetROSWorldReferenceFrameIDRequest, ::v1::agent::GetROSWorldReferenceFrameIDResponse>(std::bind(&WithStreamedUnaryMethod_GetROSWorldReferenceFrameID<BaseClass>::StreamedGetROSWorldReferenceFrameID, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetROSWorldReferenceFrameID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetROSWorldReferenceFrameID(::grpc::ServerContext* context, const ::v1::agent::GetROSWorldReferenceFrameIDRequest* request, ::v1::agent::GetROSWorldReferenceFrameIDResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetROSWorldReferenceFrameID(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::v1::agent::GetROSWorldReferenceFrameIDRequest,::v1::agent::GetROSWorldReferenceFrameIDResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateInterventionRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateInterventionRequest() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::v1::model::InterventionRequest, ::v1::model::InterventionRequest>(std::bind(&WithStreamedUnaryMethod_CreateInterventionRequest<BaseClass>::StreamedCreateInterventionRequest, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateInterventionRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateInterventionRequest(::grpc::ServerContext* context, const ::v1::model::InterventionRequest* request, ::v1::model::InterventionRequest* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateInterventionRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::v1::model::InterventionRequest,::v1::model::InterventionRequest>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetInterventionRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetInterventionRequest() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::v1::agent::GetInterventionRequestRequest, ::v1::model::InterventionRequest>(std::bind(&WithStreamedUnaryMethod_GetInterventionRequest<BaseClass>::StreamedGetInterventionRequest, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetInterventionRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetInterventionRequest(::grpc::ServerContext* context, const ::v1::agent::GetInterventionRequestRequest* request, ::v1::model::InterventionRequest* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetInterventionRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::v1::agent::GetInterventionRequestRequest,::v1::model::InterventionRequest>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetInterventionResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetInterventionResponse() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::v1::agent::GetInterventionResponseRequest, ::v1::model::InterventionResponse>(std::bind(&WithStreamedUnaryMethod_GetInterventionResponse<BaseClass>::StreamedGetInterventionResponse, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetInterventionResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetInterventionResponse(::grpc::ServerContext* context, const ::v1::agent::GetInterventionResponseRequest* request, ::v1::model::InterventionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetInterventionResponse(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::v1::agent::GetInterventionResponseRequest,::v1::model::InterventionResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_PostData<WithStreamedUnaryMethod_RegisterROSTopic<WithStreamedUnaryMethod_GetROSTopics<WithStreamedUnaryMethod_GetROSTopicsSubscriptionConfig<WithStreamedUnaryMethod_GetROSWorldReferenceFrameID<WithStreamedUnaryMethod_CreateInterventionRequest<WithStreamedUnaryMethod_GetInterventionRequest<WithStreamedUnaryMethod_GetInterventionResponse<Service > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_PostData<WithStreamedUnaryMethod_RegisterROSTopic<WithStreamedUnaryMethod_GetROSTopics<WithStreamedUnaryMethod_GetROSTopicsSubscriptionConfig<WithStreamedUnaryMethod_GetROSWorldReferenceFrameID<WithStreamedUnaryMethod_CreateInterventionRequest<WithStreamedUnaryMethod_GetInterventionRequest<WithStreamedUnaryMethod_GetInterventionResponse<Service > > > > > > > > StreamedService;
};

}  // namespace agent
}  // namespace v1


#endif  // GRPC_protos_2fagent_2fv1_2fagent_2eproto__INCLUDED
