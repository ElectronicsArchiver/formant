// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/model/v1/intervention.proto

#ifndef PROTOBUF_INCLUDED_protos_2fmodel_2fv1_2fintervention_2eproto
#define PROTOBUF_INCLUDED_protos_2fmodel_2fv1_2fintervention_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "protos/model/v1/media.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fintervention_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fmodel_2fv1_2fintervention_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_protos_2fmodel_2fv1_2fintervention_2eproto();
namespace v1 {
namespace model {
class InterventionRequest;
class InterventionRequestDefaultTypeInternal;
extern InterventionRequestDefaultTypeInternal _InterventionRequest_default_instance_;
class InterventionRequest_TagsEntry_DoNotUse;
class InterventionRequest_TagsEntry_DoNotUseDefaultTypeInternal;
extern InterventionRequest_TagsEntry_DoNotUseDefaultTypeInternal _InterventionRequest_TagsEntry_DoNotUse_default_instance_;
class InterventionResponse;
class InterventionResponseDefaultTypeInternal;
extern InterventionResponseDefaultTypeInternal _InterventionResponse_default_instance_;
class Label;
class LabelDefaultTypeInternal;
extern LabelDefaultTypeInternal _Label_default_instance_;
class LabeledPolygon;
class LabeledPolygonDefaultTypeInternal;
extern LabeledPolygonDefaultTypeInternal _LabeledPolygon_default_instance_;
class LabelingRequest;
class LabelingRequestDefaultTypeInternal;
extern LabelingRequestDefaultTypeInternal _LabelingRequest_default_instance_;
class LabelingResponse;
class LabelingResponseDefaultTypeInternal;
extern LabelingResponseDefaultTypeInternal _LabelingResponse_default_instance_;
class SelectionRequest;
class SelectionRequestDefaultTypeInternal;
extern SelectionRequestDefaultTypeInternal _SelectionRequest_default_instance_;
class SelectionResponse;
class SelectionResponseDefaultTypeInternal;
extern SelectionResponseDefaultTypeInternal _SelectionResponse_default_instance_;
class Vertex;
class VertexDefaultTypeInternal;
extern VertexDefaultTypeInternal _Vertex_default_instance_;
}  // namespace model
}  // namespace v1
namespace google {
namespace protobuf {
template<> ::v1::model::InterventionRequest* Arena::CreateMaybeMessage<::v1::model::InterventionRequest>(Arena*);
template<> ::v1::model::InterventionRequest_TagsEntry_DoNotUse* Arena::CreateMaybeMessage<::v1::model::InterventionRequest_TagsEntry_DoNotUse>(Arena*);
template<> ::v1::model::InterventionResponse* Arena::CreateMaybeMessage<::v1::model::InterventionResponse>(Arena*);
template<> ::v1::model::Label* Arena::CreateMaybeMessage<::v1::model::Label>(Arena*);
template<> ::v1::model::LabeledPolygon* Arena::CreateMaybeMessage<::v1::model::LabeledPolygon>(Arena*);
template<> ::v1::model::LabelingRequest* Arena::CreateMaybeMessage<::v1::model::LabelingRequest>(Arena*);
template<> ::v1::model::LabelingResponse* Arena::CreateMaybeMessage<::v1::model::LabelingResponse>(Arena*);
template<> ::v1::model::SelectionRequest* Arena::CreateMaybeMessage<::v1::model::SelectionRequest>(Arena*);
template<> ::v1::model::SelectionResponse* Arena::CreateMaybeMessage<::v1::model::SelectionResponse>(Arena*);
template<> ::v1::model::Vertex* Arena::CreateMaybeMessage<::v1::model::Vertex>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace v1 {
namespace model {

enum Severity {
  INFO = 0,
  WARNING = 1,
  ERROR = 2,
  CRITICAL = 3,
  Severity_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Severity_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Severity_IsValid(int value);
const Severity Severity_MIN = INFO;
const Severity Severity_MAX = CRITICAL;
const int Severity_ARRAYSIZE = Severity_MAX + 1;

const ::google::protobuf::EnumDescriptor* Severity_descriptor();
inline const ::std::string& Severity_Name(Severity value) {
  return ::google::protobuf::internal::NameOfEnum(
    Severity_descriptor(), value);
}
inline bool Severity_Parse(
    const ::std::string& name, Severity* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Severity>(
    Severity_descriptor(), name, value);
}
// ===================================================================

class InterventionRequest_TagsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<InterventionRequest_TagsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<InterventionRequest_TagsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  InterventionRequest_TagsEntry_DoNotUse();
  InterventionRequest_TagsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const InterventionRequest_TagsEntry_DoNotUse& other);
  static const InterventionRequest_TagsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const InterventionRequest_TagsEntry_DoNotUse*>(&_InterventionRequest_TagsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class InterventionRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:v1.model.InterventionRequest) */ {
 public:
  InterventionRequest();
  virtual ~InterventionRequest();

  InterventionRequest(const InterventionRequest& from);

  inline InterventionRequest& operator=(const InterventionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InterventionRequest(InterventionRequest&& from) noexcept
    : InterventionRequest() {
    *this = ::std::move(from);
  }

  inline InterventionRequest& operator=(InterventionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const InterventionRequest& default_instance();

  enum DataCase {
    kSelectionRequest = 4,
    kLabelingRequest = 5,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InterventionRequest* internal_default_instance() {
    return reinterpret_cast<const InterventionRequest*>(
               &_InterventionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(InterventionRequest* other);
  friend void swap(InterventionRequest& a, InterventionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InterventionRequest* New() const final {
    return CreateMaybeMessage<InterventionRequest>(nullptr);
  }

  InterventionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InterventionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InterventionRequest& from);
  void MergeFrom(const InterventionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InterventionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> tags = 6;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 6;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      tags() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_tags();

  // repeated .v1.model.InterventionResponse responses = 7;
  int responses_size() const;
  void clear_responses();
  static const int kResponsesFieldNumber = 7;
  ::v1::model::InterventionResponse* mutable_responses(int index);
  ::google::protobuf::RepeatedPtrField< ::v1::model::InterventionResponse >*
      mutable_responses();
  const ::v1::model::InterventionResponse& responses(int index) const;
  ::v1::model::InterventionResponse* add_responses();
  const ::google::protobuf::RepeatedPtrField< ::v1::model::InterventionResponse >&
      responses() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // int64 timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // .v1.model.Severity severity = 3;
  void clear_severity();
  static const int kSeverityFieldNumber = 3;
  ::v1::model::Severity severity() const;
  void set_severity(::v1::model::Severity value);

  // .v1.model.SelectionRequest selection_request = 4;
  bool has_selection_request() const;
  void clear_selection_request();
  static const int kSelectionRequestFieldNumber = 4;
  const ::v1::model::SelectionRequest& selection_request() const;
  ::v1::model::SelectionRequest* release_selection_request();
  ::v1::model::SelectionRequest* mutable_selection_request();
  void set_allocated_selection_request(::v1::model::SelectionRequest* selection_request);

  // .v1.model.LabelingRequest labeling_request = 5;
  bool has_labeling_request() const;
  void clear_labeling_request();
  static const int kLabelingRequestFieldNumber = 5;
  const ::v1::model::LabelingRequest& labeling_request() const;
  ::v1::model::LabelingRequest* release_labeling_request();
  ::v1::model::LabelingRequest* mutable_labeling_request();
  void set_allocated_labeling_request(::v1::model::LabelingRequest* labeling_request);

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:v1.model.InterventionRequest)
 private:
  class HasBitSetters;
  void set_has_selection_request();
  void set_has_labeling_request();

  inline bool has_data() const;
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      InterventionRequest_TagsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > tags_;
  ::google::protobuf::RepeatedPtrField< ::v1::model::InterventionResponse > responses_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::int64 timestamp_;
  int severity_;
  union DataUnion {
    DataUnion() {}
    ::v1::model::SelectionRequest* selection_request_;
    ::v1::model::LabelingRequest* labeling_request_;
  } data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_protos_2fmodel_2fv1_2fintervention_2eproto;
};
// -------------------------------------------------------------------

class InterventionResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:v1.model.InterventionResponse) */ {
 public:
  InterventionResponse();
  virtual ~InterventionResponse();

  InterventionResponse(const InterventionResponse& from);

  inline InterventionResponse& operator=(const InterventionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InterventionResponse(InterventionResponse&& from) noexcept
    : InterventionResponse() {
    *this = ::std::move(from);
  }

  inline InterventionResponse& operator=(InterventionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const InterventionResponse& default_instance();

  enum DataCase {
    kSelectionResponse = 4,
    kLabelingResponse = 5,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InterventionResponse* internal_default_instance() {
    return reinterpret_cast<const InterventionResponse*>(
               &_InterventionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(InterventionResponse* other);
  friend void swap(InterventionResponse& a, InterventionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InterventionResponse* New() const final {
    return CreateMaybeMessage<InterventionResponse>(nullptr);
  }

  InterventionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InterventionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InterventionResponse& from);
  void MergeFrom(const InterventionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InterventionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string request_id = 2;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 2;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // int64 timestamp = 3;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // .v1.model.SelectionResponse selection_response = 4;
  bool has_selection_response() const;
  void clear_selection_response();
  static const int kSelectionResponseFieldNumber = 4;
  const ::v1::model::SelectionResponse& selection_response() const;
  ::v1::model::SelectionResponse* release_selection_response();
  ::v1::model::SelectionResponse* mutable_selection_response();
  void set_allocated_selection_response(::v1::model::SelectionResponse* selection_response);

  // .v1.model.LabelingResponse labeling_response = 5;
  bool has_labeling_response() const;
  void clear_labeling_response();
  static const int kLabelingResponseFieldNumber = 5;
  const ::v1::model::LabelingResponse& labeling_response() const;
  ::v1::model::LabelingResponse* release_labeling_response();
  ::v1::model::LabelingResponse* mutable_labeling_response();
  void set_allocated_labeling_response(::v1::model::LabelingResponse* labeling_response);

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:v1.model.InterventionResponse)
 private:
  class HasBitSetters;
  void set_has_selection_response();
  void set_has_labeling_response();

  inline bool has_data() const;
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int64 timestamp_;
  union DataUnion {
    DataUnion() {}
    ::v1::model::SelectionResponse* selection_response_;
    ::v1::model::LabelingResponse* labeling_response_;
  } data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_protos_2fmodel_2fv1_2fintervention_2eproto;
};
// -------------------------------------------------------------------

class Label final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:v1.model.Label) */ {
 public:
  Label();
  virtual ~Label();

  Label(const Label& from);

  inline Label& operator=(const Label& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Label(Label&& from) noexcept
    : Label() {
    *this = ::std::move(from);
  }

  inline Label& operator=(Label&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Label& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Label* internal_default_instance() {
    return reinterpret_cast<const Label*>(
               &_Label_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Label* other);
  friend void swap(Label& a, Label& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Label* New() const final {
    return CreateMaybeMessage<Label>(nullptr);
  }

  Label* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Label>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Label& from);
  void MergeFrom(const Label& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Label* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // string display_name = 2;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 2;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // @@protoc_insertion_point(class_scope:v1.model.Label)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fintervention_2eproto;
};
// -------------------------------------------------------------------

class LabeledPolygon final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:v1.model.LabeledPolygon) */ {
 public:
  LabeledPolygon();
  virtual ~LabeledPolygon();

  LabeledPolygon(const LabeledPolygon& from);

  inline LabeledPolygon& operator=(const LabeledPolygon& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LabeledPolygon(LabeledPolygon&& from) noexcept
    : LabeledPolygon() {
    *this = ::std::move(from);
  }

  inline LabeledPolygon& operator=(LabeledPolygon&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LabeledPolygon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabeledPolygon* internal_default_instance() {
    return reinterpret_cast<const LabeledPolygon*>(
               &_LabeledPolygon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(LabeledPolygon* other);
  friend void swap(LabeledPolygon& a, LabeledPolygon& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LabeledPolygon* New() const final {
    return CreateMaybeMessage<LabeledPolygon>(nullptr);
  }

  LabeledPolygon* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LabeledPolygon>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LabeledPolygon& from);
  void MergeFrom(const LabeledPolygon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabeledPolygon* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .v1.model.Vertex vertices = 1;
  int vertices_size() const;
  void clear_vertices();
  static const int kVerticesFieldNumber = 1;
  ::v1::model::Vertex* mutable_vertices(int index);
  ::google::protobuf::RepeatedPtrField< ::v1::model::Vertex >*
      mutable_vertices();
  const ::v1::model::Vertex& vertices(int index) const;
  ::v1::model::Vertex* add_vertices();
  const ::google::protobuf::RepeatedPtrField< ::v1::model::Vertex >&
      vertices() const;

  // repeated string labels = 2;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 2;
  const ::std::string& labels(int index) const;
  ::std::string* mutable_labels(int index);
  void set_labels(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_labels(int index, ::std::string&& value);
  #endif
  void set_labels(int index, const char* value);
  void set_labels(int index, const char* value, size_t size);
  ::std::string* add_labels();
  void add_labels(const ::std::string& value);
  #if LANG_CXX11
  void add_labels(::std::string&& value);
  #endif
  void add_labels(const char* value);
  void add_labels(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& labels() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_labels();

  // @@protoc_insertion_point(class_scope:v1.model.LabeledPolygon)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::v1::model::Vertex > vertices_;
  ::google::protobuf::RepeatedPtrField<::std::string> labels_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fintervention_2eproto;
};
// -------------------------------------------------------------------

class Vertex final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:v1.model.Vertex) */ {
 public:
  Vertex();
  virtual ~Vertex();

  Vertex(const Vertex& from);

  inline Vertex& operator=(const Vertex& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vertex(Vertex&& from) noexcept
    : Vertex() {
    *this = ::std::move(from);
  }

  inline Vertex& operator=(Vertex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Vertex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vertex* internal_default_instance() {
    return reinterpret_cast<const Vertex*>(
               &_Vertex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Vertex* other);
  friend void swap(Vertex& a, Vertex& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vertex* New() const final {
    return CreateMaybeMessage<Vertex>(nullptr);
  }

  Vertex* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Vertex>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Vertex& from);
  void MergeFrom(const Vertex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vertex* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // @@protoc_insertion_point(class_scope:v1.model.Vertex)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fintervention_2eproto;
};
// -------------------------------------------------------------------

class LabelingRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:v1.model.LabelingRequest) */ {
 public:
  LabelingRequest();
  virtual ~LabelingRequest();

  LabelingRequest(const LabelingRequest& from);

  inline LabelingRequest& operator=(const LabelingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LabelingRequest(LabelingRequest&& from) noexcept
    : LabelingRequest() {
    *this = ::std::move(from);
  }

  inline LabelingRequest& operator=(LabelingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LabelingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabelingRequest* internal_default_instance() {
    return reinterpret_cast<const LabelingRequest*>(
               &_LabelingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(LabelingRequest* other);
  friend void swap(LabelingRequest& a, LabelingRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LabelingRequest* New() const final {
    return CreateMaybeMessage<LabelingRequest>(nullptr);
  }

  LabelingRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LabelingRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LabelingRequest& from);
  void MergeFrom(const LabelingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabelingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .v1.model.Label labels = 4;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 4;
  ::v1::model::Label* mutable_labels(int index);
  ::google::protobuf::RepeatedPtrField< ::v1::model::Label >*
      mutable_labels();
  const ::v1::model::Label& labels(int index) const;
  ::v1::model::Label* add_labels();
  const ::google::protobuf::RepeatedPtrField< ::v1::model::Label >&
      labels() const;

  // repeated .v1.model.LabeledPolygon hint = 5;
  int hint_size() const;
  void clear_hint();
  static const int kHintFieldNumber = 5;
  ::v1::model::LabeledPolygon* mutable_hint(int index);
  ::google::protobuf::RepeatedPtrField< ::v1::model::LabeledPolygon >*
      mutable_hint();
  const ::v1::model::LabeledPolygon& hint(int index) const;
  ::v1::model::LabeledPolygon* add_hint();
  const ::google::protobuf::RepeatedPtrField< ::v1::model::LabeledPolygon >&
      hint() const;

  // string title = 1;
  void clear_title();
  static const int kTitleFieldNumber = 1;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string instruction = 2;
  void clear_instruction();
  static const int kInstructionFieldNumber = 2;
  const ::std::string& instruction() const;
  void set_instruction(const ::std::string& value);
  #if LANG_CXX11
  void set_instruction(::std::string&& value);
  #endif
  void set_instruction(const char* value);
  void set_instruction(const char* value, size_t size);
  ::std::string* mutable_instruction();
  ::std::string* release_instruction();
  void set_allocated_instruction(::std::string* instruction);

  // .v1.model.Image image = 3;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 3;
  const ::v1::model::Image& image() const;
  ::v1::model::Image* release_image();
  ::v1::model::Image* mutable_image();
  void set_allocated_image(::v1::model::Image* image);

  // @@protoc_insertion_point(class_scope:v1.model.LabelingRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::v1::model::Label > labels_;
  ::google::protobuf::RepeatedPtrField< ::v1::model::LabeledPolygon > hint_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr instruction_;
  ::v1::model::Image* image_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fintervention_2eproto;
};
// -------------------------------------------------------------------

class LabelingResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:v1.model.LabelingResponse) */ {
 public:
  LabelingResponse();
  virtual ~LabelingResponse();

  LabelingResponse(const LabelingResponse& from);

  inline LabelingResponse& operator=(const LabelingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LabelingResponse(LabelingResponse&& from) noexcept
    : LabelingResponse() {
    *this = ::std::move(from);
  }

  inline LabelingResponse& operator=(LabelingResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LabelingResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabelingResponse* internal_default_instance() {
    return reinterpret_cast<const LabelingResponse*>(
               &_LabelingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(LabelingResponse* other);
  friend void swap(LabelingResponse& a, LabelingResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LabelingResponse* New() const final {
    return CreateMaybeMessage<LabelingResponse>(nullptr);
  }

  LabelingResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LabelingResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LabelingResponse& from);
  void MergeFrom(const LabelingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabelingResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .v1.model.LabeledPolygon value = 1;
  int value_size() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::v1::model::LabeledPolygon* mutable_value(int index);
  ::google::protobuf::RepeatedPtrField< ::v1::model::LabeledPolygon >*
      mutable_value();
  const ::v1::model::LabeledPolygon& value(int index) const;
  ::v1::model::LabeledPolygon* add_value();
  const ::google::protobuf::RepeatedPtrField< ::v1::model::LabeledPolygon >&
      value() const;

  // @@protoc_insertion_point(class_scope:v1.model.LabelingResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::v1::model::LabeledPolygon > value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fintervention_2eproto;
};
// -------------------------------------------------------------------

class SelectionRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:v1.model.SelectionRequest) */ {
 public:
  SelectionRequest();
  virtual ~SelectionRequest();

  SelectionRequest(const SelectionRequest& from);

  inline SelectionRequest& operator=(const SelectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SelectionRequest(SelectionRequest&& from) noexcept
    : SelectionRequest() {
    *this = ::std::move(from);
  }

  inline SelectionRequest& operator=(SelectionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SelectionRequest& default_instance();

  enum DataCase {
    kImage = 2,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SelectionRequest* internal_default_instance() {
    return reinterpret_cast<const SelectionRequest*>(
               &_SelectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(SelectionRequest* other);
  friend void swap(SelectionRequest& a, SelectionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SelectionRequest* New() const final {
    return CreateMaybeMessage<SelectionRequest>(nullptr);
  }

  SelectionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SelectionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SelectionRequest& from);
  void MergeFrom(const SelectionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string options = 4;
  int options_size() const;
  void clear_options();
  static const int kOptionsFieldNumber = 4;
  const ::std::string& options(int index) const;
  ::std::string* mutable_options(int index);
  void set_options(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_options(int index, ::std::string&& value);
  #endif
  void set_options(int index, const char* value);
  void set_options(int index, const char* value, size_t size);
  ::std::string* add_options();
  void add_options(const ::std::string& value);
  #if LANG_CXX11
  void add_options(::std::string&& value);
  #endif
  void add_options(const char* value);
  void add_options(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& options() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_options();

  // string title = 1;
  void clear_title();
  static const int kTitleFieldNumber = 1;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string instruction = 3;
  void clear_instruction();
  static const int kInstructionFieldNumber = 3;
  const ::std::string& instruction() const;
  void set_instruction(const ::std::string& value);
  #if LANG_CXX11
  void set_instruction(::std::string&& value);
  #endif
  void set_instruction(const char* value);
  void set_instruction(const char* value, size_t size);
  ::std::string* mutable_instruction();
  ::std::string* release_instruction();
  void set_allocated_instruction(::std::string* instruction);

  // uint32 hint = 5;
  void clear_hint();
  static const int kHintFieldNumber = 5;
  ::google::protobuf::uint32 hint() const;
  void set_hint(::google::protobuf::uint32 value);

  // .v1.model.Image image = 2;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 2;
  const ::v1::model::Image& image() const;
  ::v1::model::Image* release_image();
  ::v1::model::Image* mutable_image();
  void set_allocated_image(::v1::model::Image* image);

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:v1.model.SelectionRequest)
 private:
  class HasBitSetters;
  void set_has_image();

  inline bool has_data() const;
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> options_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr instruction_;
  ::google::protobuf::uint32 hint_;
  union DataUnion {
    DataUnion() {}
    ::v1::model::Image* image_;
  } data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_protos_2fmodel_2fv1_2fintervention_2eproto;
};
// -------------------------------------------------------------------

class SelectionResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:v1.model.SelectionResponse) */ {
 public:
  SelectionResponse();
  virtual ~SelectionResponse();

  SelectionResponse(const SelectionResponse& from);

  inline SelectionResponse& operator=(const SelectionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SelectionResponse(SelectionResponse&& from) noexcept
    : SelectionResponse() {
    *this = ::std::move(from);
  }

  inline SelectionResponse& operator=(SelectionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SelectionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SelectionResponse* internal_default_instance() {
    return reinterpret_cast<const SelectionResponse*>(
               &_SelectionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(SelectionResponse* other);
  friend void swap(SelectionResponse& a, SelectionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SelectionResponse* New() const final {
    return CreateMaybeMessage<SelectionResponse>(nullptr);
  }

  SelectionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SelectionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SelectionResponse& from);
  void MergeFrom(const SelectionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::uint32 value() const;
  void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:v1.model.SelectionResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fintervention_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// InterventionRequest

// string id = 1;
inline void InterventionRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InterventionRequest::id() const {
  // @@protoc_insertion_point(field_get:v1.model.InterventionRequest.id)
  return id_.GetNoArena();
}
inline void InterventionRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:v1.model.InterventionRequest.id)
}
#if LANG_CXX11
inline void InterventionRequest::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1.model.InterventionRequest.id)
}
#endif
inline void InterventionRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1.model.InterventionRequest.id)
}
inline void InterventionRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1.model.InterventionRequest.id)
}
inline ::std::string* InterventionRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:v1.model.InterventionRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InterventionRequest::release_id() {
  // @@protoc_insertion_point(field_release:v1.model.InterventionRequest.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InterventionRequest::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:v1.model.InterventionRequest.id)
}

// int64 timestamp = 2;
inline void InterventionRequest::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 InterventionRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:v1.model.InterventionRequest.timestamp)
  return timestamp_;
}
inline void InterventionRequest::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:v1.model.InterventionRequest.timestamp)
}

// .v1.model.Severity severity = 3;
inline void InterventionRequest::clear_severity() {
  severity_ = 0;
}
inline ::v1::model::Severity InterventionRequest::severity() const {
  // @@protoc_insertion_point(field_get:v1.model.InterventionRequest.severity)
  return static_cast< ::v1::model::Severity >(severity_);
}
inline void InterventionRequest::set_severity(::v1::model::Severity value) {
  
  severity_ = value;
  // @@protoc_insertion_point(field_set:v1.model.InterventionRequest.severity)
}

// .v1.model.SelectionRequest selection_request = 4;
inline bool InterventionRequest::has_selection_request() const {
  return data_case() == kSelectionRequest;
}
inline void InterventionRequest::set_has_selection_request() {
  _oneof_case_[0] = kSelectionRequest;
}
inline void InterventionRequest::clear_selection_request() {
  if (has_selection_request()) {
    delete data_.selection_request_;
    clear_has_data();
  }
}
inline ::v1::model::SelectionRequest* InterventionRequest::release_selection_request() {
  // @@protoc_insertion_point(field_release:v1.model.InterventionRequest.selection_request)
  if (has_selection_request()) {
    clear_has_data();
      ::v1::model::SelectionRequest* temp = data_.selection_request_;
    data_.selection_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::v1::model::SelectionRequest& InterventionRequest::selection_request() const {
  // @@protoc_insertion_point(field_get:v1.model.InterventionRequest.selection_request)
  return has_selection_request()
      ? *data_.selection_request_
      : *reinterpret_cast< ::v1::model::SelectionRequest*>(&::v1::model::_SelectionRequest_default_instance_);
}
inline ::v1::model::SelectionRequest* InterventionRequest::mutable_selection_request() {
  if (!has_selection_request()) {
    clear_data();
    set_has_selection_request();
    data_.selection_request_ = CreateMaybeMessage< ::v1::model::SelectionRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:v1.model.InterventionRequest.selection_request)
  return data_.selection_request_;
}

// .v1.model.LabelingRequest labeling_request = 5;
inline bool InterventionRequest::has_labeling_request() const {
  return data_case() == kLabelingRequest;
}
inline void InterventionRequest::set_has_labeling_request() {
  _oneof_case_[0] = kLabelingRequest;
}
inline void InterventionRequest::clear_labeling_request() {
  if (has_labeling_request()) {
    delete data_.labeling_request_;
    clear_has_data();
  }
}
inline ::v1::model::LabelingRequest* InterventionRequest::release_labeling_request() {
  // @@protoc_insertion_point(field_release:v1.model.InterventionRequest.labeling_request)
  if (has_labeling_request()) {
    clear_has_data();
      ::v1::model::LabelingRequest* temp = data_.labeling_request_;
    data_.labeling_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::v1::model::LabelingRequest& InterventionRequest::labeling_request() const {
  // @@protoc_insertion_point(field_get:v1.model.InterventionRequest.labeling_request)
  return has_labeling_request()
      ? *data_.labeling_request_
      : *reinterpret_cast< ::v1::model::LabelingRequest*>(&::v1::model::_LabelingRequest_default_instance_);
}
inline ::v1::model::LabelingRequest* InterventionRequest::mutable_labeling_request() {
  if (!has_labeling_request()) {
    clear_data();
    set_has_labeling_request();
    data_.labeling_request_ = CreateMaybeMessage< ::v1::model::LabelingRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:v1.model.InterventionRequest.labeling_request)
  return data_.labeling_request_;
}

// map<string, string> tags = 6;
inline int InterventionRequest::tags_size() const {
  return tags_.size();
}
inline void InterventionRequest::clear_tags() {
  tags_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
InterventionRequest::tags() const {
  // @@protoc_insertion_point(field_map:v1.model.InterventionRequest.tags)
  return tags_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
InterventionRequest::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_map:v1.model.InterventionRequest.tags)
  return tags_.MutableMap();
}

// repeated .v1.model.InterventionResponse responses = 7;
inline int InterventionRequest::responses_size() const {
  return responses_.size();
}
inline void InterventionRequest::clear_responses() {
  responses_.Clear();
}
inline ::v1::model::InterventionResponse* InterventionRequest::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:v1.model.InterventionRequest.responses)
  return responses_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::v1::model::InterventionResponse >*
InterventionRequest::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:v1.model.InterventionRequest.responses)
  return &responses_;
}
inline const ::v1::model::InterventionResponse& InterventionRequest::responses(int index) const {
  // @@protoc_insertion_point(field_get:v1.model.InterventionRequest.responses)
  return responses_.Get(index);
}
inline ::v1::model::InterventionResponse* InterventionRequest::add_responses() {
  // @@protoc_insertion_point(field_add:v1.model.InterventionRequest.responses)
  return responses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::v1::model::InterventionResponse >&
InterventionRequest::responses() const {
  // @@protoc_insertion_point(field_list:v1.model.InterventionRequest.responses)
  return responses_;
}

inline bool InterventionRequest::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void InterventionRequest::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline InterventionRequest::DataCase InterventionRequest::data_case() const {
  return InterventionRequest::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// InterventionResponse

// string id = 1;
inline void InterventionResponse::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InterventionResponse::id() const {
  // @@protoc_insertion_point(field_get:v1.model.InterventionResponse.id)
  return id_.GetNoArena();
}
inline void InterventionResponse::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:v1.model.InterventionResponse.id)
}
#if LANG_CXX11
inline void InterventionResponse::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1.model.InterventionResponse.id)
}
#endif
inline void InterventionResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1.model.InterventionResponse.id)
}
inline void InterventionResponse::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1.model.InterventionResponse.id)
}
inline ::std::string* InterventionResponse::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:v1.model.InterventionResponse.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InterventionResponse::release_id() {
  // @@protoc_insertion_point(field_release:v1.model.InterventionResponse.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InterventionResponse::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:v1.model.InterventionResponse.id)
}

// string request_id = 2;
inline void InterventionResponse::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InterventionResponse::request_id() const {
  // @@protoc_insertion_point(field_get:v1.model.InterventionResponse.request_id)
  return request_id_.GetNoArena();
}
inline void InterventionResponse::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:v1.model.InterventionResponse.request_id)
}
#if LANG_CXX11
inline void InterventionResponse::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1.model.InterventionResponse.request_id)
}
#endif
inline void InterventionResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1.model.InterventionResponse.request_id)
}
inline void InterventionResponse::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1.model.InterventionResponse.request_id)
}
inline ::std::string* InterventionResponse::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:v1.model.InterventionResponse.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InterventionResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:v1.model.InterventionResponse.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InterventionResponse::set_allocated_request_id(::std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:v1.model.InterventionResponse.request_id)
}

// int64 timestamp = 3;
inline void InterventionResponse::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 InterventionResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:v1.model.InterventionResponse.timestamp)
  return timestamp_;
}
inline void InterventionResponse::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:v1.model.InterventionResponse.timestamp)
}

// .v1.model.SelectionResponse selection_response = 4;
inline bool InterventionResponse::has_selection_response() const {
  return data_case() == kSelectionResponse;
}
inline void InterventionResponse::set_has_selection_response() {
  _oneof_case_[0] = kSelectionResponse;
}
inline void InterventionResponse::clear_selection_response() {
  if (has_selection_response()) {
    delete data_.selection_response_;
    clear_has_data();
  }
}
inline ::v1::model::SelectionResponse* InterventionResponse::release_selection_response() {
  // @@protoc_insertion_point(field_release:v1.model.InterventionResponse.selection_response)
  if (has_selection_response()) {
    clear_has_data();
      ::v1::model::SelectionResponse* temp = data_.selection_response_;
    data_.selection_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::v1::model::SelectionResponse& InterventionResponse::selection_response() const {
  // @@protoc_insertion_point(field_get:v1.model.InterventionResponse.selection_response)
  return has_selection_response()
      ? *data_.selection_response_
      : *reinterpret_cast< ::v1::model::SelectionResponse*>(&::v1::model::_SelectionResponse_default_instance_);
}
inline ::v1::model::SelectionResponse* InterventionResponse::mutable_selection_response() {
  if (!has_selection_response()) {
    clear_data();
    set_has_selection_response();
    data_.selection_response_ = CreateMaybeMessage< ::v1::model::SelectionResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:v1.model.InterventionResponse.selection_response)
  return data_.selection_response_;
}

// .v1.model.LabelingResponse labeling_response = 5;
inline bool InterventionResponse::has_labeling_response() const {
  return data_case() == kLabelingResponse;
}
inline void InterventionResponse::set_has_labeling_response() {
  _oneof_case_[0] = kLabelingResponse;
}
inline void InterventionResponse::clear_labeling_response() {
  if (has_labeling_response()) {
    delete data_.labeling_response_;
    clear_has_data();
  }
}
inline ::v1::model::LabelingResponse* InterventionResponse::release_labeling_response() {
  // @@protoc_insertion_point(field_release:v1.model.InterventionResponse.labeling_response)
  if (has_labeling_response()) {
    clear_has_data();
      ::v1::model::LabelingResponse* temp = data_.labeling_response_;
    data_.labeling_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::v1::model::LabelingResponse& InterventionResponse::labeling_response() const {
  // @@protoc_insertion_point(field_get:v1.model.InterventionResponse.labeling_response)
  return has_labeling_response()
      ? *data_.labeling_response_
      : *reinterpret_cast< ::v1::model::LabelingResponse*>(&::v1::model::_LabelingResponse_default_instance_);
}
inline ::v1::model::LabelingResponse* InterventionResponse::mutable_labeling_response() {
  if (!has_labeling_response()) {
    clear_data();
    set_has_labeling_response();
    data_.labeling_response_ = CreateMaybeMessage< ::v1::model::LabelingResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:v1.model.InterventionResponse.labeling_response)
  return data_.labeling_response_;
}

inline bool InterventionResponse::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void InterventionResponse::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline InterventionResponse::DataCase InterventionResponse::data_case() const {
  return InterventionResponse::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Label

// string value = 1;
inline void Label::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Label::value() const {
  // @@protoc_insertion_point(field_get:v1.model.Label.value)
  return value_.GetNoArena();
}
inline void Label::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:v1.model.Label.value)
}
#if LANG_CXX11
inline void Label::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1.model.Label.value)
}
#endif
inline void Label::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1.model.Label.value)
}
inline void Label::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1.model.Label.value)
}
inline ::std::string* Label::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:v1.model.Label.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Label::release_value() {
  // @@protoc_insertion_point(field_release:v1.model.Label.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Label::set_allocated_value(::std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:v1.model.Label.value)
}

// string display_name = 2;
inline void Label::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Label::display_name() const {
  // @@protoc_insertion_point(field_get:v1.model.Label.display_name)
  return display_name_.GetNoArena();
}
inline void Label::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:v1.model.Label.display_name)
}
#if LANG_CXX11
inline void Label::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1.model.Label.display_name)
}
#endif
inline void Label::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1.model.Label.display_name)
}
inline void Label::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1.model.Label.display_name)
}
inline ::std::string* Label::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:v1.model.Label.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Label::release_display_name() {
  // @@protoc_insertion_point(field_release:v1.model.Label.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Label::set_allocated_display_name(::std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:v1.model.Label.display_name)
}

// -------------------------------------------------------------------

// LabeledPolygon

// repeated .v1.model.Vertex vertices = 1;
inline int LabeledPolygon::vertices_size() const {
  return vertices_.size();
}
inline void LabeledPolygon::clear_vertices() {
  vertices_.Clear();
}
inline ::v1::model::Vertex* LabeledPolygon::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:v1.model.LabeledPolygon.vertices)
  return vertices_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::v1::model::Vertex >*
LabeledPolygon::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:v1.model.LabeledPolygon.vertices)
  return &vertices_;
}
inline const ::v1::model::Vertex& LabeledPolygon::vertices(int index) const {
  // @@protoc_insertion_point(field_get:v1.model.LabeledPolygon.vertices)
  return vertices_.Get(index);
}
inline ::v1::model::Vertex* LabeledPolygon::add_vertices() {
  // @@protoc_insertion_point(field_add:v1.model.LabeledPolygon.vertices)
  return vertices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::v1::model::Vertex >&
LabeledPolygon::vertices() const {
  // @@protoc_insertion_point(field_list:v1.model.LabeledPolygon.vertices)
  return vertices_;
}

// repeated string labels = 2;
inline int LabeledPolygon::labels_size() const {
  return labels_.size();
}
inline void LabeledPolygon::clear_labels() {
  labels_.Clear();
}
inline const ::std::string& LabeledPolygon::labels(int index) const {
  // @@protoc_insertion_point(field_get:v1.model.LabeledPolygon.labels)
  return labels_.Get(index);
}
inline ::std::string* LabeledPolygon::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:v1.model.LabeledPolygon.labels)
  return labels_.Mutable(index);
}
inline void LabeledPolygon::set_labels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:v1.model.LabeledPolygon.labels)
  labels_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void LabeledPolygon::set_labels(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:v1.model.LabeledPolygon.labels)
  labels_.Mutable(index)->assign(std::move(value));
}
#endif
inline void LabeledPolygon::set_labels(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:v1.model.LabeledPolygon.labels)
}
inline void LabeledPolygon::set_labels(int index, const char* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:v1.model.LabeledPolygon.labels)
}
inline ::std::string* LabeledPolygon::add_labels() {
  // @@protoc_insertion_point(field_add_mutable:v1.model.LabeledPolygon.labels)
  return labels_.Add();
}
inline void LabeledPolygon::add_labels(const ::std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:v1.model.LabeledPolygon.labels)
}
#if LANG_CXX11
inline void LabeledPolygon::add_labels(::std::string&& value) {
  labels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:v1.model.LabeledPolygon.labels)
}
#endif
inline void LabeledPolygon::add_labels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:v1.model.LabeledPolygon.labels)
}
inline void LabeledPolygon::add_labels(const char* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:v1.model.LabeledPolygon.labels)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
LabeledPolygon::labels() const {
  // @@protoc_insertion_point(field_list:v1.model.LabeledPolygon.labels)
  return labels_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
LabeledPolygon::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:v1.model.LabeledPolygon.labels)
  return &labels_;
}

// -------------------------------------------------------------------

// Vertex

// double x = 1;
inline void Vertex::clear_x() {
  x_ = 0;
}
inline double Vertex::x() const {
  // @@protoc_insertion_point(field_get:v1.model.Vertex.x)
  return x_;
}
inline void Vertex::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:v1.model.Vertex.x)
}

// double y = 2;
inline void Vertex::clear_y() {
  y_ = 0;
}
inline double Vertex::y() const {
  // @@protoc_insertion_point(field_get:v1.model.Vertex.y)
  return y_;
}
inline void Vertex::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:v1.model.Vertex.y)
}

// -------------------------------------------------------------------

// LabelingRequest

// string title = 1;
inline void LabelingRequest::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LabelingRequest::title() const {
  // @@protoc_insertion_point(field_get:v1.model.LabelingRequest.title)
  return title_.GetNoArena();
}
inline void LabelingRequest::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:v1.model.LabelingRequest.title)
}
#if LANG_CXX11
inline void LabelingRequest::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1.model.LabelingRequest.title)
}
#endif
inline void LabelingRequest::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1.model.LabelingRequest.title)
}
inline void LabelingRequest::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1.model.LabelingRequest.title)
}
inline ::std::string* LabelingRequest::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:v1.model.LabelingRequest.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LabelingRequest::release_title() {
  // @@protoc_insertion_point(field_release:v1.model.LabelingRequest.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LabelingRequest::set_allocated_title(::std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:v1.model.LabelingRequest.title)
}

// string instruction = 2;
inline void LabelingRequest::clear_instruction() {
  instruction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LabelingRequest::instruction() const {
  // @@protoc_insertion_point(field_get:v1.model.LabelingRequest.instruction)
  return instruction_.GetNoArena();
}
inline void LabelingRequest::set_instruction(const ::std::string& value) {
  
  instruction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:v1.model.LabelingRequest.instruction)
}
#if LANG_CXX11
inline void LabelingRequest::set_instruction(::std::string&& value) {
  
  instruction_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1.model.LabelingRequest.instruction)
}
#endif
inline void LabelingRequest::set_instruction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instruction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1.model.LabelingRequest.instruction)
}
inline void LabelingRequest::set_instruction(const char* value, size_t size) {
  
  instruction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1.model.LabelingRequest.instruction)
}
inline ::std::string* LabelingRequest::mutable_instruction() {
  
  // @@protoc_insertion_point(field_mutable:v1.model.LabelingRequest.instruction)
  return instruction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LabelingRequest::release_instruction() {
  // @@protoc_insertion_point(field_release:v1.model.LabelingRequest.instruction)
  
  return instruction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LabelingRequest::set_allocated_instruction(::std::string* instruction) {
  if (instruction != nullptr) {
    
  } else {
    
  }
  instruction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instruction);
  // @@protoc_insertion_point(field_set_allocated:v1.model.LabelingRequest.instruction)
}

// .v1.model.Image image = 3;
inline bool LabelingRequest::has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline const ::v1::model::Image& LabelingRequest::image() const {
  const ::v1::model::Image* p = image_;
  // @@protoc_insertion_point(field_get:v1.model.LabelingRequest.image)
  return p != nullptr ? *p : *reinterpret_cast<const ::v1::model::Image*>(
      &::v1::model::_Image_default_instance_);
}
inline ::v1::model::Image* LabelingRequest::release_image() {
  // @@protoc_insertion_point(field_release:v1.model.LabelingRequest.image)
  
  ::v1::model::Image* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::v1::model::Image* LabelingRequest::mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::Image>(GetArenaNoVirtual());
    image_ = p;
  }
  // @@protoc_insertion_point(field_mutable:v1.model.LabelingRequest.image)
  return image_;
}
inline void LabelingRequest::set_allocated_image(::v1::model::Image* image) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(image_);
  }
  if (image) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      image = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:v1.model.LabelingRequest.image)
}

// repeated .v1.model.Label labels = 4;
inline int LabelingRequest::labels_size() const {
  return labels_.size();
}
inline void LabelingRequest::clear_labels() {
  labels_.Clear();
}
inline ::v1::model::Label* LabelingRequest::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:v1.model.LabelingRequest.labels)
  return labels_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::v1::model::Label >*
LabelingRequest::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:v1.model.LabelingRequest.labels)
  return &labels_;
}
inline const ::v1::model::Label& LabelingRequest::labels(int index) const {
  // @@protoc_insertion_point(field_get:v1.model.LabelingRequest.labels)
  return labels_.Get(index);
}
inline ::v1::model::Label* LabelingRequest::add_labels() {
  // @@protoc_insertion_point(field_add:v1.model.LabelingRequest.labels)
  return labels_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::v1::model::Label >&
LabelingRequest::labels() const {
  // @@protoc_insertion_point(field_list:v1.model.LabelingRequest.labels)
  return labels_;
}

// repeated .v1.model.LabeledPolygon hint = 5;
inline int LabelingRequest::hint_size() const {
  return hint_.size();
}
inline void LabelingRequest::clear_hint() {
  hint_.Clear();
}
inline ::v1::model::LabeledPolygon* LabelingRequest::mutable_hint(int index) {
  // @@protoc_insertion_point(field_mutable:v1.model.LabelingRequest.hint)
  return hint_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::v1::model::LabeledPolygon >*
LabelingRequest::mutable_hint() {
  // @@protoc_insertion_point(field_mutable_list:v1.model.LabelingRequest.hint)
  return &hint_;
}
inline const ::v1::model::LabeledPolygon& LabelingRequest::hint(int index) const {
  // @@protoc_insertion_point(field_get:v1.model.LabelingRequest.hint)
  return hint_.Get(index);
}
inline ::v1::model::LabeledPolygon* LabelingRequest::add_hint() {
  // @@protoc_insertion_point(field_add:v1.model.LabelingRequest.hint)
  return hint_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::v1::model::LabeledPolygon >&
LabelingRequest::hint() const {
  // @@protoc_insertion_point(field_list:v1.model.LabelingRequest.hint)
  return hint_;
}

// -------------------------------------------------------------------

// LabelingResponse

// repeated .v1.model.LabeledPolygon value = 1;
inline int LabelingResponse::value_size() const {
  return value_.size();
}
inline void LabelingResponse::clear_value() {
  value_.Clear();
}
inline ::v1::model::LabeledPolygon* LabelingResponse::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:v1.model.LabelingResponse.value)
  return value_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::v1::model::LabeledPolygon >*
LabelingResponse::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:v1.model.LabelingResponse.value)
  return &value_;
}
inline const ::v1::model::LabeledPolygon& LabelingResponse::value(int index) const {
  // @@protoc_insertion_point(field_get:v1.model.LabelingResponse.value)
  return value_.Get(index);
}
inline ::v1::model::LabeledPolygon* LabelingResponse::add_value() {
  // @@protoc_insertion_point(field_add:v1.model.LabelingResponse.value)
  return value_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::v1::model::LabeledPolygon >&
LabelingResponse::value() const {
  // @@protoc_insertion_point(field_list:v1.model.LabelingResponse.value)
  return value_;
}

// -------------------------------------------------------------------

// SelectionRequest

// string title = 1;
inline void SelectionRequest::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SelectionRequest::title() const {
  // @@protoc_insertion_point(field_get:v1.model.SelectionRequest.title)
  return title_.GetNoArena();
}
inline void SelectionRequest::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:v1.model.SelectionRequest.title)
}
#if LANG_CXX11
inline void SelectionRequest::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1.model.SelectionRequest.title)
}
#endif
inline void SelectionRequest::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1.model.SelectionRequest.title)
}
inline void SelectionRequest::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1.model.SelectionRequest.title)
}
inline ::std::string* SelectionRequest::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:v1.model.SelectionRequest.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SelectionRequest::release_title() {
  // @@protoc_insertion_point(field_release:v1.model.SelectionRequest.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelectionRequest::set_allocated_title(::std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:v1.model.SelectionRequest.title)
}

// .v1.model.Image image = 2;
inline bool SelectionRequest::has_image() const {
  return data_case() == kImage;
}
inline void SelectionRequest::set_has_image() {
  _oneof_case_[0] = kImage;
}
inline ::v1::model::Image* SelectionRequest::release_image() {
  // @@protoc_insertion_point(field_release:v1.model.SelectionRequest.image)
  if (has_image()) {
    clear_has_data();
      ::v1::model::Image* temp = data_.image_;
    data_.image_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::v1::model::Image& SelectionRequest::image() const {
  // @@protoc_insertion_point(field_get:v1.model.SelectionRequest.image)
  return has_image()
      ? *data_.image_
      : *reinterpret_cast< ::v1::model::Image*>(&::v1::model::_Image_default_instance_);
}
inline ::v1::model::Image* SelectionRequest::mutable_image() {
  if (!has_image()) {
    clear_data();
    set_has_image();
    data_.image_ = CreateMaybeMessage< ::v1::model::Image >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:v1.model.SelectionRequest.image)
  return data_.image_;
}

// string instruction = 3;
inline void SelectionRequest::clear_instruction() {
  instruction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SelectionRequest::instruction() const {
  // @@protoc_insertion_point(field_get:v1.model.SelectionRequest.instruction)
  return instruction_.GetNoArena();
}
inline void SelectionRequest::set_instruction(const ::std::string& value) {
  
  instruction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:v1.model.SelectionRequest.instruction)
}
#if LANG_CXX11
inline void SelectionRequest::set_instruction(::std::string&& value) {
  
  instruction_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1.model.SelectionRequest.instruction)
}
#endif
inline void SelectionRequest::set_instruction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instruction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1.model.SelectionRequest.instruction)
}
inline void SelectionRequest::set_instruction(const char* value, size_t size) {
  
  instruction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1.model.SelectionRequest.instruction)
}
inline ::std::string* SelectionRequest::mutable_instruction() {
  
  // @@protoc_insertion_point(field_mutable:v1.model.SelectionRequest.instruction)
  return instruction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SelectionRequest::release_instruction() {
  // @@protoc_insertion_point(field_release:v1.model.SelectionRequest.instruction)
  
  return instruction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelectionRequest::set_allocated_instruction(::std::string* instruction) {
  if (instruction != nullptr) {
    
  } else {
    
  }
  instruction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instruction);
  // @@protoc_insertion_point(field_set_allocated:v1.model.SelectionRequest.instruction)
}

// repeated string options = 4;
inline int SelectionRequest::options_size() const {
  return options_.size();
}
inline void SelectionRequest::clear_options() {
  options_.Clear();
}
inline const ::std::string& SelectionRequest::options(int index) const {
  // @@protoc_insertion_point(field_get:v1.model.SelectionRequest.options)
  return options_.Get(index);
}
inline ::std::string* SelectionRequest::mutable_options(int index) {
  // @@protoc_insertion_point(field_mutable:v1.model.SelectionRequest.options)
  return options_.Mutable(index);
}
inline void SelectionRequest::set_options(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:v1.model.SelectionRequest.options)
  options_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SelectionRequest::set_options(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:v1.model.SelectionRequest.options)
  options_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SelectionRequest::set_options(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  options_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:v1.model.SelectionRequest.options)
}
inline void SelectionRequest::set_options(int index, const char* value, size_t size) {
  options_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:v1.model.SelectionRequest.options)
}
inline ::std::string* SelectionRequest::add_options() {
  // @@protoc_insertion_point(field_add_mutable:v1.model.SelectionRequest.options)
  return options_.Add();
}
inline void SelectionRequest::add_options(const ::std::string& value) {
  options_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:v1.model.SelectionRequest.options)
}
#if LANG_CXX11
inline void SelectionRequest::add_options(::std::string&& value) {
  options_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:v1.model.SelectionRequest.options)
}
#endif
inline void SelectionRequest::add_options(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  options_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:v1.model.SelectionRequest.options)
}
inline void SelectionRequest::add_options(const char* value, size_t size) {
  options_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:v1.model.SelectionRequest.options)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
SelectionRequest::options() const {
  // @@protoc_insertion_point(field_list:v1.model.SelectionRequest.options)
  return options_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
SelectionRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable_list:v1.model.SelectionRequest.options)
  return &options_;
}

// uint32 hint = 5;
inline void SelectionRequest::clear_hint() {
  hint_ = 0u;
}
inline ::google::protobuf::uint32 SelectionRequest::hint() const {
  // @@protoc_insertion_point(field_get:v1.model.SelectionRequest.hint)
  return hint_;
}
inline void SelectionRequest::set_hint(::google::protobuf::uint32 value) {
  
  hint_ = value;
  // @@protoc_insertion_point(field_set:v1.model.SelectionRequest.hint)
}

inline bool SelectionRequest::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void SelectionRequest::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline SelectionRequest::DataCase SelectionRequest::data_case() const {
  return SelectionRequest::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SelectionResponse

// uint32 value = 1;
inline void SelectionResponse::clear_value() {
  value_ = 0u;
}
inline ::google::protobuf::uint32 SelectionResponse::value() const {
  // @@protoc_insertion_point(field_get:v1.model.SelectionResponse.value)
  return value_;
}
inline void SelectionResponse::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:v1.model.SelectionResponse.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace v1

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::v1::model::Severity> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::v1::model::Severity>() {
  return ::v1::model::Severity_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_protos_2fmodel_2fv1_2fintervention_2eproto
